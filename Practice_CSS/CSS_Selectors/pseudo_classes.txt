Source: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes

/* ----------------------------- Linguistic pseudo-classes ----------------------------- */
These pseudo-classes reflect the document language, and enable the selection of elements based on language or script direction.

:dir
The directionality pseudo-class selects an element based on its directionality as determined by the document language.

:lang
Select an element based on its content language.

/* ----------------------------- LOCATION PSEUDO-CLASSES ----------------------------- */
These pseudo-classes relate to links, and to targeted elements within the current document.

:any-link
Matches an element if the element would match either :link or :visited.

:link
Matches links that have not yet been visited.

:visited
Matches links that have been visited.

:local-link
Matches links whose absolute URL is the same as the target URL, for example anchor links to the same page.

:target
Matches the element which is the target of the document URL.

:target-within
Matches elements which are the target of the document URL, but also elements which have a descendant which is the target of the document URL.

:scope
Represents elements that are a reference point for selectors to match against.

/* ----------------------------- User action pseudo-classes ----------------------------- */
These pseudo-classes require some interaction by the user in order for them to apply, such as holding a mouse pointer over an element.

:hover
Matches when a user designates an item with a pointing device, for example holding the mouse pointer over it.

:active
Matches when an item is being activated by the user, for example clicked on.

:focus
Matches when an element has focus.

:focus-visible
Matches when an element has focus and the user agent identifies that the element should be visibly focused.

:focus-within
Matches an element to which :focus applies, plus any element that has a descendant to which :focus applies.

/* ----------------------------- Time-dimensional pseudo-classes ----------------------------- */
These pseudo-classes apply when viewing something which has timing, such as a WebVTT caption track.

:current
Represents the element or ancestor of the element that is being displayed.

:past
Represents an element that occurs entirely before the :current element.

:future
Represents an element that occurs entirely after the :current element.

/* ----------------------------- Resource state pseudo-classes ----------------------------- */
These pseudo-classes apply to media that is capable of being in a state where it would be described as playing, such as a video.

:playing
Represents a media element that is capable of playing when that element is playing.

:paused
Represents a media element that is capable of playing when that element is paused.

The input pseudo-classes
These pseudo-classes relate to form elements, and enable selecting elements based on HTML attributes and the state that the field is in before and after interaction.

:autofill
Matches when an <input> has been autofilled by the browser.

:enabled
Represents a user interface element that is in an enabled state.

:disabled
Represents a user interface element that is in a disabled state.

:read-only
Represents any element that cannot be changed by the user.

:read-write
Represents any element that is user-editable.

:placeholder-shown
Matches an input element that is displaying placeholder text, for example from the HTML5 placeholder attribute.

:default
Matches one or more UI elements that are the default among a set of elements.

:checked
Matches when elements such as checkboxes and radiobuttons are toggled on.

:indeterminate
Matches when UI elements are in an indeterminate state.

:blank
Matches a user-input element which is empty, containing an empty string or other null input.

:valid
Matches an element with valid contents. For example an input element with type 'email' which contains a validly formed email address.

:invalid
Matches an element with invalid contents. For example an input element with type 'email' with a name entered.

:in-range
Applies to elements with range limitations, for example a slider control, when the selected value is in the allowed range.

:out-of-range
Applies to elements with range limitations, for example a slider control, when the selected value is outside the allowed range.

:required
Matches when a form element is required.

:optional
Matches when a form element is optional.

:user-invalid
Represents an element with incorrect input, but only when the user has interacted with it.

/* ----------------------------- Tree-structural pseudo-classes ----------------------------- */
These pseudo-classes relate to the location of an element within the document tree.

:root
Represents an element that is the root of the document. In HTML this is usually the <html> element.

:empty
Represents an element with no children other than white-space characters.

:nth-child
Uses An+B notation to select elements from a list of sibling elements.

:nth-last-child
Uses An+B notation to select elements from a list of sibling elements, counting backwards from the end of the list.

:first-child
Matches an element that is the first of its siblings.

:last-child
Matches an element that is the last of its siblings.

:only-child
Matches an element that has no siblings. For example a list item with no other list items in that list.

:nth-of-type
Uses An+B notation to select elements from a list of sibling elements that match a certain type from a list of sibling elements.

:nth-last-of-type
Uses An+B notation to select elements from a list of sibling elements that match a certain type from a list of sibling elements counting backwards from the end of the list.

:first-of-type
Matches an element that is the first of its siblings, and also matches a certain type selector.

:last-of-type
Matches an element that is the last of its siblings, and also matches a certain type selector.

:only-of-type
Matches an element that has no siblings of the chosen type selector.

 